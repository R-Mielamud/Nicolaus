"""
Django settings for Nicolaus project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJ_DEBUG", "1") == "1"

ALLOWED_HOSTS = ["35.178.186.33", "api.nicolaus.com.ua", "127.0.0.1", "localhost"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "rest_framework",
    "api",
    "authorization",
    "book_filters",
    "books",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "authorization.middleware.extract_auth_token",
    "authorization.middleware.extract_user",
    "authorization.middleware.process_permissions",
]

ROOT_URLCONF = 'Nicolaus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Nicolaus.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "nicolaus",
            "USER": "nicolaus_user",
            "PASSWORD": os.environ.get("POSTGRES_PWD", ""),
            "HOST": "127.0.0.1",
            "PORT": "5432",
        },
    }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        "api.authentication.CsrfExemptAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "EXCEPTION_HANDLER": "Nicolaus.middleware.api_error_handler",
}

# JWT

JWT_SECRET = os.environ.get("JWT_SECRET", "")

JWT_ALGORITHM = os.environ.get("JWT_ALGORITHM", "")

JWT_USER_FIELD = "id"

JWT_PREFIX = "Bearer "

ALLOW_ROUTES = {
    "PUBLISH": [
        r"^/api/user/register/$",
        r"^/api/user/login/$",
    ],
    "PUBLISH_GET": [
        r"^/api/books/",
    ],
    "FOR_ADMIN_MOD": [
        r"^/api/books/",
        r"^/api/books/filters/[a-zA-Z0-9]+/bulk/$",
        r"^/api/books/filters/[a-zA-Z0-9]+/[a-zA-Z0-9]+/bulk/$",
    ],
    "FOR_ADMIN": [
        r"^/api/books/filters/[a-zA-Z0-9]+/csv/$",
        r"^/api/books/filters/[a-zA-Z0-9]+/[a-zA-Z0-9]+/csv/$",
    ],
}

# Cross-Origin Resource Sharing

CORS_ALLOWED_ORIGINS = [
    "https://nicolaus.com.ua",
    "http://nicolaus.com.ua",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

# S3 File Uploading

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", "")

AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY", "")

AWS_S3_MEDIA_BUCKET = os.environ.get("AWS_S3_MEDIA_BUCKET", "")

AWS_S3_MEDIA_REGION = os.environ.get("AWS_S3_MEDIA_REGION", "")

AWS_S3_BOOK_IMAGE_KEY = "book_images"

# Celery Settings

BROKER_URL = "redis://localhost:6379"

CELERY_RESULT_URL = "redis://localhost:6379"

CELERY_ACCEPT_CONTENT = ["application/json"]

CELERY_TASK_SERIALIZER = "json"

CELERY_RESULT_SERIALIER = "json"

CELERY_TIMEZONE = "UTC"
